name: ci-command
on:
  repository_dispatch:
    types: [ci-command]
jobs:
  execute-command:
    runs-on: ubuntu-latest
    steps:
      - name: Check subcommand
        id: check-command
        run: echo "::set-output name=supported::${{ contains('help device automation update-schema re-run test', github.event.client_payload.slash_command.args.unnamed.arg1) }}"

      - name: Help
        if: ${{ steps.check-command.outputs.supported == 'false' }}
        uses: scoremedia/create-or-update-comment@v1
        with:
          token: ${{ secrets.BOT_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            > The command `${{ github.event.client_payload.slash_command.args.unnamed.arg1 }}` is not supported
            > To check the commands use /ci help

      - name: Confirm subcommand
        if: ${{ steps.check-command.outputs.supported == 'false' }}
        run: exit 1

      - name: Setup branch
        id: setup-branch
        run: |
          pr_ref="${{ github.event.client_payload.pull_request.head.ref }}"
          branch_arg="${{ github.event.client_payload.slash_command.args.named.branch }}"
          branch="${branch_arg:-$pr_ref}"
          echo "::set-output name=branch::$branch"

      - name: Help
        if: ${{ github.event.client_payload.slash_command.args.unnamed.arg1 == 'help' }}
        uses: scoremedia/create-or-update-comment@v1
        with:
          token: ${{ secrets.BOT_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            > Use the command as follows
            > /ci help # prints this help
            > /ci device # creates a device build for the current branch
            > • you can optionally pass in branch /ci device branch=some-branch
            > /ci automation # creates an automation build for the current branch
            > • you can optionally pass in branch /ci device branch=some-branch
            > /ci update-schema <schema-name> # calls update schema for the provided endpoint
            > see [details](https://github.com/scoremedia/thescore-iphone/actions/workflows/update-schema.yml)
            > /ci re-run # re-runs failed jobs
            > optionally pass all argument to re-run all jobs
            > /ci test # runs the CI job to test the current ref
            > • you can optionally pass in branch /ci test branch=some-branch

      - name: Device Build
        if: ${{ github.event.client_payload.slash_command.args.unnamed.arg1 == 'device' }}
        uses: scoremedia/workflow-dispatch@v1
        with:
          workflow: Device Build
          token: ${{ secrets.BOT_TOKEN }}
          inputs: '{"branch":"${{ steps.setup-branch.outputs.branch }}"}'
          ref: ${{ steps.setup-branch.outputs.branch }}

      - name: Automation Build
        if: ${{ github.event.client_payload.slash_command.args.unnamed.arg1 == 'automation' }}
        uses: scoremedia/workflow-dispatch@v1
        with:
          workflow: CI
          token: ${{ secrets.BOT_TOKEN }}
          inputs: '{"branch":"${{ steps.setup-branch.outputs.branch }}","automation-build":"true"}'
          ref: ${{ steps.setup-branch.outputs.branch }}

      - name: Schema update
        if: ${{ github.event.client_payload.slash_command.args.unnamed.arg1 == 'update-schema' }}
        uses: scoremedia/workflow-dispatch@v1
        with:
          workflow: Update Schemas
          token: ${{ secrets.BOT_TOKEN }}
          inputs: '{"schemaName":"${{ github.event.client_payload.slash_command.args.unnamed.arg2 }}"}'

      - name: Test
        if: ${{ github.event.client_payload.slash_command.args.unnamed.arg1 == 'test' }}
        uses: scoremedia/workflow-dispatch@v1
        with:
          workflow: CI
          token: ${{ secrets.BOT_TOKEN }}
          ref: ${{ steps.setup-branch.outputs.branch }}
          inputs: '{"comment-id":"${{ github.event.client_payload.github.payload.comment.id }}"}'

      - name: Re-Run
        if: ${{ github.event.client_payload.slash_command.args.unnamed.arg1 == 're-run' }}
        uses: actions/github-script@v4
        with:
          script: |
            try {
              const check_suites = await github.checks.listSuitesForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.client_payload.pull_request.head.ref,
                per_page: 100
              })

              console.log(context.payload.client_payload.slash_command.args.unnamed.arg2)
              console.log(check_suites.data.total_count)

              check_suites.data.check_suites.forEach(suite => {
                should_re_run = context.payload.client_payload.slash_command.args.unnamed.arg2 == "all" 
                    || (suite.status == "completed" && ["cancelled", "failure", "timed_out"].includes(suite.conclusion))
                if (should_re_run) {
                  github.checks.rerequestSuite({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    check_suite_id: suite.id,
                  })
                }
              })
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Add reaction
        uses: scoremedia/create-or-update-comment@v1
        with:
          token: ${{ secrets.BOT_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          reaction-type: hooray